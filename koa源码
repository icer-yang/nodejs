import co from 'co';
import _ from 'lodash';
import http from 'http';
import debug from 'debug';
import assert from 'assert';
import Stream from 'stream';
import Cookies from 'cookies';
import accepts from 'accepts';
import statuses from 'statuses';
import compose from 'koa-compose';
import onFinished from 'on-finished';
import compose_es7 from 'composition';
import context from './context';
import request from './request';
import response from './response';
import {
  EventEmitter
}
from 'events';

debug('superk:applicatioin')

export default () => {
  if (!(this instanceof Application)) {
    return new Application;
  }
}

//对es6语法不是很熟悉的请学习一趟再来,虽然我也不懂,哈哈
//这里继承自event
class Application extends EventEmitter {
  constructor() {
    super()
    //这些基础的就不需要说了吧
    this.env = process.env.NODE_ENV || 'development';
    this.subdomainOffset = 2;
    //中间件数组
    this.middleware = [];
    // 上下文 object
    this.context = Object.create(context);
    // request对象
    this.request = Object.create(request);
    // response对象
    this.response = Object.create(response);
  }
  toJSON() {
    /**
     * 只返回subdomainOffset,env两项
     */
    return _.pick(this, [
      'subdomainOffset',
      'env'
    ])
  }
  inspect() {
    return this.toJSON()
  }
  listen(...args) {
    debug('listen');
    let server = http.createServer(this.callback());
    /**
     * 返还一个httpServer对象
     */
    return server.listen.apply(server, args)
  }
  use(fn) {a\
    // 如果没启用es7 async函数特性就对函数进行Generator检查
    if (!this.experimental) {
      assert(fn && 'GeneratorFunction' == fn.constructor.name, 'app.use() requires a generator function');
    }
    debug('use %s', fn._name || fn.name || '-');
    // push到中间件数组
    this.middleware.push(fn);
    // 链式调用
    return this;
  }
  callback() {
    // 将respond中间件放到middleware里的第一位,为啥呢,下面接着说
    let mw = [respond].concat(this.middleware);
    /**
     * 判断是否启动es7 async函数这块不是很明白?看不懂..
     * compose是将所有中间件全部执行了?用compose生成一个generator
    */
      //var gen = compose(mw);
      //var fn = co.wrap(gen);
    let fn = this.experimental ? compose_es7(mw) : co.wrap(compose(mw));
    if (!this.listeners('error').length) {
      this.on('error', this.onerror);
    }
    return (req, res) => {
      // 默认404
      res.statusCode = 404;
      // 最重要的创建执行上下文,将req,res对象传进去
      /* return一个context对象
        { request: { method: undefined, url: '/', header: {} },
          response: { status: undefined, message: undefined, header: {} },
          app: { subdomainOffset: 2, env: 'development' },
          originalUrl: '/',
          req: '<original node req>',
          res: '<original node res>',
          socket: '<original node socket>'
        }
      */
      let ctx = this.createContext(req, res);

      // 这里不懂 `Execute a callback when a request closes, finishes, or errors.` 介绍是这样介绍的,反正我不懂
      onFinished(res, ctx.onerror);
      /*
       *看了看实现这里的fn是个function(next){}
       *以middleware个数来循环,倒着执行,因为是i--,先app.use的先执行
       *这里我不懂 哈哈 我慢慢理解试试看 咱们以composition为例,具体代码看node_modules/composition/index.js实现
       *应该是将中间件数组里的每个函数执行,call改变this,这就是你中间件里能访问到this.redirect,this.url的原因,
       *fn的this就是ctx这里记一下
       *每个中间件的参数next
      */
      fn.call(ctx).catch(ctx.onerror);
    }
  }
  createContext(req, res) {
    let context = Object.create(this.context);
    let request = context.request = Object.create(this.request);
    let response = context.response = Object.create(this.response);
    context.app = request.app = response.app = this;
    context.req = request.req = response.req = req;
    context.res = request.res = response.res = res;
    request.ctx = response.ctx = context;
    request.response = response;
    response.request = request;
    context.onerror = context.onerror.bind(context);
    context.originalUrl = request.originalUrl = req.url;
    context.cookies = new Cookies(req, res, this.keys);
    context.accept = request.accept = accepts(req);
    context.state = {};
    return context;
  }
  onerror(err) {
    assert(err instanceof Error, 'non-error thrown: ' + err);
    if (404 === error.status) return;
    if ('test' === this.env) return;
    let msg = err.stack || err.toString();
    msg.replace(/^/gm, '  ');
    console.error(`\n ${msg} \n`);
  }
}

async function respond(next) {
  await next;

  if (this.respond === false) {
    return
  }
  let res = this;
  if (res.headersSent || !this.writable) {
    return;
  }
  let body = this.body;
  let code = this.status;

  if (statuses.empty[code]) {
    this.body = null;
    return res.end();
  }
  if ('HEAD' == this.method) {
    if (isJSON(body)) this.length = Buffer.byteLength(JSON.stringify(body));
    return res.end();
  }
  if (null == body) {
    this.type = 'text';
    body = this.message || String(code);
    this.length = Buffer.byteLength(body);
    return res.end(body);
  }
  if (Buffer.isBuffer(body)) return res.end(body);
  if ('string' == typeof body) return res.end(body);
  if (body instanceof Stream) return body.pipe(res);

  body = JSON.stringify(body);
  this.length = Buffer.byteLength(body);
  res.end(body);
}

2015-5-20 00:19 先这样吧,和女票聊天去了.
yield
koa的中间件大概就是这么个形式

//context.js
import statuses from 'statuses'
import delegate from 'delegates';
import httpAssert from 'http-assert'
import createError from 'http-errors'

let Context = {
  inspect(){
    return this.toJSON();
  },
  toJSON(){
    return {
      request: this.request.toJSON(),
      response: this.response.toJSON(),
      app: this.app.toJSON(),
      originalUrl: this.originalUrl,
      req: '<original node req>',
      res: '<original node res>',
      socket: '<original node socket>',
    }
  },
  throw(...args){
    throw createError.apply(null,args);
  },
  onerror(err){
    if(null==err){
      return;
    }
    if(!(err instanceof Error)){
      err = new Error('non-error thrown: ' + err);
    }
    this.app.emit('error',err,this);
    if(this.headerSent || !this.writabel){
      err.headerSent = true;
      return;
    }
    this.res._headers = {};
    // 强制设置type为text响应错误
    this.type = 'text';

    if ('ENOENT' == err.code) {
      err.status = 404;
    }

    if ('number' != typeof err.status || !statuses[err.status]) {
      err.status = 500;
    }

    let code = statuses[err.status];
    let msg = err.expose ? err.message : code;
    this.status = err.status;
    this.length = Buffer.byteLength(msg);
    this.res.send(msg);
  }
};

/**
 * 开始被这段没弄懂,就好奇为啥我明明是this.request.body,为啥this.body也能取到,奥妙就在这,这里设置了别名下面代码应该能很清楚表达出来意思吧
 * method:
 * proto[name] = func
 * Context['acceptsLanguages'] = func
 * func(){
 *   this[target][name].apply(this[target],arguments)
 *   this['request']['acceptsLanguages'].apply(this['request'],arguments)
 * }
 *
 * access:
 * proto.__defineGetter__(name,function(){
 *   return this[target][name]
 * })
 * Context.__defineGetter__('querystring',function(){
 *  return this['request']['querystring']
 * })
 */

//Response aliases
delegate(Context, 'response')
  .method('attachment')
  .method('redirect')
  .method('remove')
  .method('vary')
  .method('set')
  .method('append')
  .access('status')
  .access('message')
  .access('body')
  .access('length')
  .access('type')
  .access('lastModified')
  .access('etag')
  .getter('headerSent')
  .getter('writable');

// Request aliases
delegate(Context, 'request')
  .method('acceptsLanguages')
  .method('acceptsEncodings')
  .method('acceptsCharsets')
  .method('accepts')
  .method('get')
  .method('is')
  .access('querystring')
  .access('idempotent')
  .access('socket')
  .access('search')
  .access('method')
  .access('query')
  .access('path')
  .access('url')
  .getter('href')
  .getter('subdomains')
  .getter('protocol')
  .getter('host')
  .getter('hostname')
  .getter('header')
  .getter('headers')
  .getter('secure')
  .getter('stale')
  .getter('fresh')
  .getter('ips')
  .getter('ip');

export default Context




//===============================================
app.callback = function(){
  var mw = [respond].concat(this.middleware);
  var gen = compose(mw);
  var fn = co.wrap(gen);
  var self = this;
  if (!this.listeners('error').length) this.on('error', this.onerror);
  return function(req, res){
    res.statusCode = 404;
    var ctx = self.createContext(req, res);
    onFinished(res, ctx.onerror);
    fn.call(ctx).catch(ctx.onerror);
  }
};
function compose(middleware){
  return function *(next){
    var i = middleware.length;
    var prev = next || noop();
    var curr;
    while (i--) {
      curr = middleware[i];
      prev = curr.call(this, prev);
    }
    yield *prev;
  }
}

这里再次说明，gengerator是在写的时候里面出现关键词yield，调用的时候必须用var.next才能得到每一次yield的值
所以当别人调用你的时候是不需要出现yield的，同样也不需要await
而当你自己的generator()代码中出现next()函数时，看看是否是对象冒充，冒充调用generator的对象。
对一串函数数组进行compose，对函数数组做了一次逆序排列并赋值prev给形参next，
当执行时，由于await的存在又不会一次执行到底，co则通过gen.next方法跳到每一个yield
result = function* (next){
  var i = middleware.length
  var prev = next || noop()
  var curr
  while(i--){
    curr=middleware[i]
    prev = curr.call(this,prev) //由application冒充curr也就是appuse中的function来调用,且将prev作为参数
                                //这里是调用了(ctx,next)=>{ },ctx=this，next=prev，如果这里是普通函数且同步执行，则环环调用
                                //这个中间价的参数只有一个(next)，确实在调用result函数时依次会调用这个数组中每一个函数
                                //co也是返回一个函数，也就是fn执行的时候执行
                                //而当这里是generator函数时，直接调用函数是无法执行的，必须有gen.next来 yield，当某一个中间件不调用await next时，也就是不调用prev了，
  }
  yield *prev
}
THUNK写法就是将多参数变为单参数
function co(GenFunc) {
        return function(cb) {
                   var gen = GenFunc();
                   nextgenloop();//这是一个递归函数，目的就是将callback嵌套写进去ret.value（nextGENLOOP）
                                //一般的递归是递归调用参数，此处递归是将函数本身作为参数递归
                   function nextgenloop(args) { // 传入args
                     if (gen.next) {//此处的next和
                               var ret = gen.next(args) // 给next传入args
                               if (ret.done) {
                                         cb && cb(args)
                               } else {
                                 ret.value(nextgenloop)
                               }
                      }
                  }
        }
}
co内部对res.value做了类型判断，如果是generator，它自己会递归调用co(generator)，而co也会返回一个promise。(我写的core方法没有对此进行描述)
yield generator 和yield *generator的区别：前者会将一个generator作为返回值，后者则会将控制交给这个generator，并迭代它


// 正常版本的readFile（多参数版本）
fs.readFile(fileName, callback);

// Thunk版本的readFile（单参数版本）
var readFileThunk = Thunk(fileName);
readFileThunk(callback);
连着写则是thunk(filename)(callback)

var Thunk = function (fileName){
  return function (callback){
    return fs.readFile(fileName, callback); 
  };
};